// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Dev\Calculator\internal\arithmetic\use_cases\use_case.go
//
// Generated by this command:
//
//	mockgen -source=C:\Dev\Calculator\internal\arithmetic\use_cases\use_case.go -destination=C:\Dev\Calculator\internal\arithmetic\use_cases\mocks\mock_use_case.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	arithmetic "Calculator/internal/arithmetic"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockResultService is a mock of ResultService interface.
type MockResultService struct {
	ctrl     *gomock.Controller
	recorder *MockResultServiceMockRecorder
	isgomock struct{}
}

// MockResultServiceMockRecorder is the mock recorder for MockResultService.
type MockResultServiceMockRecorder struct {
	mock *MockResultService
}

// NewMockResultService creates a new mock instance.
func NewMockResultService(ctrl *gomock.Controller) *MockResultService {
	mock := &MockResultService{ctrl: ctrl}
	mock.recorder = &MockResultServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultService) EXPECT() *MockResultServiceMockRecorder {
	return m.recorder
}

// PublishError mocks base method.
func (m *MockResultService) PublishError(errMsg, queueName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishError", errMsg, queueName)
}

// PublishError indicates an expected call of PublishError.
func (mr *MockResultServiceMockRecorder) PublishError(errMsg, queueName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishError", reflect.TypeOf((*MockResultService)(nil).PublishError), errMsg, queueName)
}

// PublishResult mocks base method.
func (m *MockResultService) PublishResult(result arithmetic.Result, queueName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishResult", result, queueName)
}

// PublishResult indicates an expected call of PublishResult.
func (mr *MockResultServiceMockRecorder) PublishResult(result, queueName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishResult", reflect.TypeOf((*MockResultService)(nil).PublishResult), result, queueName)
}
