// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Dev\Calculator\internal\arithmetic\services\result_service.go
//
// Generated by this command:
//
//	mockgen -source=C:\Dev\Calculator\internal\arithmetic\services\result_service.go -destination=C:\Dev\Calculator\internal\arithmetic\services\mocks\mock_result_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	executor "Calculator/internal/executor"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBrokerClient is a mock of BrokerClient interface.
type MockBrokerClient struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerClientMockRecorder
	isgomock struct{}
}

// MockBrokerClientMockRecorder is the mock recorder for MockBrokerClient.
type MockBrokerClientMockRecorder struct {
	mock *MockBrokerClient
}

// NewMockBrokerClient creates a new mock instance.
func NewMockBrokerClient(ctrl *gomock.Controller) *MockBrokerClient {
	mock := &MockBrokerClient{ctrl: ctrl}
	mock.recorder = &MockBrokerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrokerClient) EXPECT() *MockBrokerClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBrokerClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBrokerClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBrokerClient)(nil).Close))
}

// Consume mocks base method.
func (m *MockBrokerClient) Consume(queue string, handler executor.ResultProcessor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", queue, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockBrokerClientMockRecorder) Consume(queue, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockBrokerClient)(nil).Consume), queue, handler)
}

// DeclareQueue mocks base method.
func (m *MockBrokerClient) DeclareQueue(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclareQueue", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclareQueue indicates an expected call of DeclareQueue.
func (mr *MockBrokerClientMockRecorder) DeclareQueue(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclareQueue", reflect.TypeOf((*MockBrokerClient)(nil).DeclareQueue), name)
}

// Publish mocks base method.
func (m *MockBrokerClient) Publish(queue string, body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", queue, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockBrokerClientMockRecorder) Publish(queue, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockBrokerClient)(nil).Publish), queue, body)
}
